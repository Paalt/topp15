/*------------------------------------*\
		#MIXINS
\*------------------------------------*/

@mixin main-font($font-weight) {
	font-family: $main-font; 
	font-weight: $font-weight;
}

/* Mixin to dynamically set the page url
 * Useful if URL needs to be changed.
 * Using to variables to express the month, as SASS does not seem to support leading zeroes when passing them with @include command.
*/

@mixin bgimage($year, $monthDigit1, $monthDigit2, $name) {
 	$url:"../images/#{$name}.png";
	$pageurl:"#{$siteurl}/wp-content/uploads/#{$year}/#{$monthDigit1}#{$monthDigit2}/#{$name}.jpg";
	background: url($pageurl);
}


/* Responsive retina ready images usage:
 *	#logo {
 *	  width: 33.33%;
 *	  @include bp(small-screen-retina) {
 *		width: 100%;
 *	  }
 *	}
*/

@mixin bp($point) {
	
	/* For non-retina based devices that have a smaller screen */
	@if $point == small-screen {
		@media only screen and #{$small-screen} { @content; }
	}
	
	/* Retina enabled devices with smaller screen */
	@else if $point == small-screen-retina {
		@media
		only screen and #{$webkit-min-pixel-ratio} and #{$small-screen},
		only screen and #{$mozilla-min-pixel-ratio} and #{$small-screen},
		only screen and #{$opera-min-pixel-ratio} and #{$small-screen},
		only screen and #{$min-pizel-ratio} and #{$small-screen},
		only screen and #{$min-resolution} and #{$small-screen},
		only screen and #{$min-resolution-dppx} and #{$small-screen} { @content; }
	}
	
	/*Non- retina based devices with medium screen size */
	@else if $point == medium-screen {
		@media only screen and #{$medium-screen} { @content; }
	}
	
	/* Retina devices with medium screen size */
	@else if $point == medium-screen-retina {
		@media
		only screen and #{$webkit-min-pixel-ratio} and #{$medium-screen},
		only screen and #{$mozilla-min-pixel-ratio} and #{$medium-screen},
		only screen and #{$opera-min-pixel-ratio} and #{$medium-screen},
		only screen and #{$min-pizel-ratio} and #{$medium-screen},
		only screen and #{$min-resolution} and #{$medium-screen},
		only screen and #{$min-resolution-dppx} and #{$medium-screen} { @content; }
	}
	
	/* Non-retina devices with large screen sizes */
	@else if $point == large-screen {
		@media only screen and#{$large-screen}  { @content; }
	}
	
	/* Retina devices with large screen sizes */
	@else if $point == large-screen-retina {
		@media
		only screen and #{$webkit-min-pixel-ratio} and #{$large-screen},
		only screen and #{$mozilla-min-pixel-ratio} and #{$large-screen},
		only screen and #{$opera-min-pixel-ratio} and #{$large-screen},
		only screen and #{$min-pizel-ratio} and #{$large-screen},
		only screen and #{$min-resolution} and #{$large-screen},
		only screen and #{$min-resolution-dppx} and #{$large-screen} { @content; }
	}
}

/* Animation mixin
 * Support for all browsers.
 * Keyframes.
*/

@mixin animation($name, $duration, $easing, $delay, $iteration, $direction, $state, $fillmode) {
 	
	/* Chrome, Safari*/
    -webkit-animation-name: $name;
    -webkit-animation-duration: $duration;
    -webkit-animation-timing-function: $easing;
    -webkit-animation-delay: $delay;
    -webkit-animation-iteration-count: $iteration;
    -webkit-animation-direction: $direction;
    -webkit-animation-play-state: $state;
	-webkit-animation-fill-mode: $fillmode;
	
	
	 /* Opera */
	-o-animation-name: $name;
    -o-animation-duration: $duration;
    -o-animation-timing-function: $easing;
    -o-animation-delay: $delay;
    -o-animation-iteration-count: $iteration;
    -o-animation-direction: $direction;
    -o-animation-play-state: $state;
	-o-animation-fill-mode: $fillmode;
 
    /* Mozilla */
	-moz-animation-name: $name;
    -moz-animation-duration: $duration;
    -moz-animation-timing-function: $easing;
    -moz-animation-delay: $delay;
    -moz-animation-iteration-count: $iteration;
    -moz-animation-direction: $direction;
    -moz-animation-play-state: $state;
    -moz-animation-fill-mode: $fillmode;
	
    /* Standard syntax */
	animation-name: $name;
    animation-duration: $duration;
    animation-timing-function: $easing;
    animation-delay: $delay;
    animation-iteration-count: $iteration;
    animation-direction: $direction;
    animation-play-state: $state;
	animation-fill-mode: $fillmode;
}

@mixin keyframes($animation-name) {
    @-webkit-keyframes #{$animation-name} {
        @content;
    }
    @-moz-keyframes #{$animation-name} {
        @content;
    }  
    @-ms-keyframes #{$animation-name} {
        @content;
    }
    @-o-keyframes #{$animation-name} {
        @content;
    }  
    @keyframes #{$animation-name} {
        @content;
    }
}


/* Mixins to transform, scale, skew, transform origin and translate
*/
// generic transform
@mixin transform($transforms) {
	   -moz-transform: $transforms;
	     -o-transform: $transforms;
	    -ms-transform: $transforms;
	-webkit-transform: $transforms;
            transform: $transforms;
}
// rotate
@mixin rotate ($deg) {
  @include transform(rotate(#{$deg}deg));
}
 
// scale
@mixin scale($scale) {
	 @include transform(scale($scale));
} 
// translate
@mixin translate ($x, $y) {
   @include transform(translate($x, $y));
}
// skew
@mixin skew ($x, $y) {
   @include transform(skew(#{$x}deg, #{$y}deg));
}
//transform origin
@mixin transform-origin ($origin) {
        moz-transform-origin: $origin;
	     -o-transform-origin: $origin;
	    -ms-transform-origin: $origin;
	-webkit-transform-origin: $origin;
            transform-origin: $origin;
}
